// <auto-generated />
using System;
using ECommerceMySQL.Web.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ECommerceMySQL.Web.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("ECommerceMySQL.Web.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ECommerceMySQL.Web.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("ECommerceMySQL.Web.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Electronic devices and gadgets",
                            Name = "Electronics"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Fashion and apparel",
                            Name = "Clothing"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Books and literature",
                            Name = "Books"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Home decor and garden supplies",
                            Name = "Home & Garden"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Sports equipment and accessories",
                            Name = "Sports"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Toys and games",
                            Name = "Toys"
                        });
                });

            modelBuilder.Entity("ECommerceMySQL.Web.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2024, 12, 15, 12, 37, 47, 481, DateTimeKind.Utc).AddTicks(2810),
                            Description = "Latest model smartphone",
                            ImageUrl = "/images/products/phone.jpg",
                            Name = "Smartphone",
                            Price = 699.99m,
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2024, 12, 15, 12, 37, 47, 481, DateTimeKind.Utc).AddTicks(3620),
                            Description = "Powerful laptop for work and gaming",
                            ImageUrl = "/images/products/laptop.jpg",
                            Name = "Laptop",
                            Price = 1299.99m,
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2024, 12, 15, 12, 37, 47, 481, DateTimeKind.Utc).AddTicks(3630),
                            Description = "Wireless noise-canceling headphones",
                            ImageUrl = "/images/products/headphones.jpg",
                            Name = "Headphones",
                            Price = 199.99m,
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2024, 12, 15, 12, 37, 47, 481, DateTimeKind.Utc).AddTicks(3630),
                            Description = "Fitness tracking smartwatch",
                            ImageUrl = "/images/products/smartwatch.jpg",
                            Name = "Smartwatch",
                            Price = 249.99m,
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2024, 12, 15, 12, 37, 47, 481, DateTimeKind.Utc).AddTicks(3630),
                            Description = "Cotton casual t-shirt",
                            ImageUrl = "/images/products/tshirt.jpg",
                            Name = "T-Shirt",
                            Price = 19.99m,
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2024, 12, 15, 12, 37, 47, 481, DateTimeKind.Utc).AddTicks(3630),
                            Description = "Classic blue jeans",
                            ImageUrl = "/images/products/jeans.jpg",
                            Name = "Jeans",
                            Price = 49.99m,
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2024, 12, 15, 12, 37, 47, 481, DateTimeKind.Utc).AddTicks(3630),
                            Description = "Comfortable running shoes",
                            ImageUrl = "/images/products/sneakers.jpg",
                            Name = "Sneakers",
                            Price = 79.99m,
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2024, 12, 15, 12, 37, 47, 481, DateTimeKind.Utc).AddTicks(3630),
                            Description = "Waterproof winter jacket",
                            ImageUrl = "/images/products/jacket.jpg",
                            Name = "Jacket",
                            Price = 89.99m,
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2024, 12, 15, 12, 37, 47, 481, DateTimeKind.Utc).AddTicks(3640),
                            Description = "Bestselling fiction novel",
                            ImageUrl = "/images/products/novel.jpg",
                            Name = "Novel",
                            Price = 14.99m,
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2024, 12, 15, 12, 37, 47, 481, DateTimeKind.Utc).AddTicks(3640),
                            Description = "Gourmet cooking recipes",
                            ImageUrl = "/images/products/cookbook.jpg",
                            Name = "Cookbook",
                            Price = 24.99m,
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2024, 12, 15, 12, 37, 47, 481, DateTimeKind.Utc).AddTicks(3640),
                            Description = "Personal development guide",
                            ImageUrl = "/images/products/selfhelp.jpg",
                            Name = "Self-Help Book",
                            Price = 19.99m,
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2024, 12, 15, 12, 37, 47, 481, DateTimeKind.Utc).AddTicks(3640),
                            Description = "World history encyclopedia",
                            ImageUrl = "/images/products/history.jpg",
                            Name = "History Book",
                            Price = 29.99m,
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2024, 12, 15, 12, 37, 47, 481, DateTimeKind.Utc).AddTicks(3640),
                            Description = "Modern LED table lamp",
                            ImageUrl = "/images/products/lamp.jpg",
                            Name = "Table Lamp",
                            Price = 39.99m,
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2024, 12, 15, 12, 37, 47, 481, DateTimeKind.Utc).AddTicks(3650),
                            Description = "Ceramic plant pot set",
                            ImageUrl = "/images/products/pot.jpg",
                            Name = "Plant Pot",
                            Price = 24.99m,
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2024, 12, 15, 12, 37, 47, 481, DateTimeKind.Utc).AddTicks(3650),
                            Description = "Decorative throw pillow",
                            ImageUrl = "/images/products/pillow.jpg",
                            Name = "Throw Pillow",
                            Price = 19.99m,
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2024, 12, 15, 12, 37, 47, 481, DateTimeKind.Utc).AddTicks(3650),
                            Description = "Modern wall clock",
                            ImageUrl = "/images/products/clock.jpg",
                            Name = "Wall Clock",
                            Price = 34.99m,
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 5,
                            CreatedAt = new DateTime(2024, 12, 15, 12, 37, 47, 481, DateTimeKind.Utc).AddTicks(3650),
                            Description = "Non-slip yoga mat",
                            ImageUrl = "/images/products/yoga.jpg",
                            Name = "Yoga Mat",
                            Price = 29.99m,
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 5,
                            CreatedAt = new DateTime(2024, 12, 15, 12, 37, 47, 481, DateTimeKind.Utc).AddTicks(3660),
                            Description = "Adjustable dumbbell set",
                            ImageUrl = "/images/products/dumbbells.jpg",
                            Name = "Dumbbell Set",
                            Price = 149.99m,
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 5,
                            CreatedAt = new DateTime(2024, 12, 15, 12, 37, 47, 481, DateTimeKind.Utc).AddTicks(3660),
                            Description = "Official size basketball",
                            ImageUrl = "/images/products/basketball.jpg",
                            Name = "Basketball",
                            Price = 24.99m,
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 5,
                            CreatedAt = new DateTime(2024, 12, 15, 12, 37, 47, 481, DateTimeKind.Utc).AddTicks(3660),
                            Description = "Professional tennis racket",
                            ImageUrl = "/images/products/racket.jpg",
                            Name = "Tennis Racket",
                            Price = 89.99m,
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = 21,
                            CategoryId = 6,
                            CreatedAt = new DateTime(2024, 12, 15, 12, 37, 47, 481, DateTimeKind.Utc).AddTicks(3660),
                            Description = "Building blocks set",
                            ImageUrl = "/images/products/lego.jpg",
                            Name = "LEGO Set",
                            Price = 49.99m,
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = 22,
                            CategoryId = 6,
                            CreatedAt = new DateTime(2024, 12, 15, 12, 37, 47, 481, DateTimeKind.Utc).AddTicks(3660),
                            Description = "Family board game",
                            ImageUrl = "/images/products/boardgame.jpg",
                            Name = "Board Game",
                            Price = 29.99m,
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = 23,
                            CategoryId = 6,
                            CreatedAt = new DateTime(2024, 12, 15, 12, 37, 47, 481, DateTimeKind.Utc).AddTicks(3660),
                            Description = "Remote control car",
                            ImageUrl = "/images/products/rccar.jpg",
                            Name = "RC Car",
                            Price = 59.99m,
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = 24,
                            CategoryId = 6,
                            CreatedAt = new DateTime(2024, 12, 15, 12, 37, 47, 481, DateTimeKind.Utc).AddTicks(3660),
                            Description = "1000-piece puzzle",
                            ImageUrl = "/images/products/puzzle.jpg",
                            Name = "Puzzle",
                            Price = 19.99m,
                            StockQuantity = 0
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ECommerceMySQL.Web.Models.CartItem", b =>
                {
                    b.HasOne("ECommerceMySQL.Web.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ECommerceMySQL.Web.Models.Product", b =>
                {
                    b.HasOne("ECommerceMySQL.Web.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ECommerceMySQL.Web.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ECommerceMySQL.Web.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerceMySQL.Web.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ECommerceMySQL.Web.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ECommerceMySQL.Web.Models.Category", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
